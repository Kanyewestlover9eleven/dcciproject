generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

enum MemberStatus {
  ACTIVE
  INACTIVE
  DECEASED
}

model Contractor {
  id             Int      @id @default(autoincrement())
  name           String?
  gender         String?
  age            Int?            // ‚Üê must be here
  nationalId     String?
  membershipDate DateTime?
  companyLicense String?
  addressEmail   String?
  contactFax     String?
  region         String?
  coreBusiness   String?
  industryType   String?
  status         MemberStatus @default(ACTIVE)
  registrations  Registration[]  // one contractor, many registrations
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Audience {
  id        Int      @id @default(autoincrement())
  name      String
  filters   Json     // { status?:string[], gender?:string[], region?:string[], industryType?:string[], ageMin?:number, ageMax?:number }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String
  emailBody String
  waBody    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlastJob {
  id             Int         @id @default(autoincrement())
  audienceId     Int?
  templateId     Int?
  filters        Json?       // snapshot used for this job
  subject        String?
  emailBody      String?
  waBody         String?
  channelEmail   Boolean     @default(false)
  channelWhatsApp Boolean    @default(false)
  total          Int         @default(0)
  status         BlastStatus @default(QUEUED)
  createdAt      DateTime    @default(now())
  startedAt      DateTime?
  finishedAt     DateTime?

}

enum BlastStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Registration {
  id           Int                 @id @default(autoincrement())
  // copied from contact form (store raw values)
  companyName  String
  companyNumber String?
  registrationDate DateTime?

  registeredAddress     String?
  correspondenceAddress String?
  website               String?
  email                 String?
  phone                 String?
  fax                   String?

  authorisedCapital String?
  paidUpCapital     String?
  dayakEquity       String?

  contactPersonName        String?
  contactPersonDesignation String?
  contactPersonPhone       String?

  // keep raw structures as JSON
  directors         Json?     // array of strings
  licenses          Json?     // the licenses object
  otherRegistrations Json?    // array of strings

  status        RegistrationStatus @default(PENDING)
  contractorId  Int?
  contractor    Contractor?        @relation(fields: [contractorId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

